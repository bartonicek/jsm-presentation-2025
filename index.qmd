---
title: "Interactive Data Exploration with Plotscaper"
subtitle: " and the Hidden Algebra of Interactive Graphics"
format: 
  revealjs:
    theme: [default, styles.scss]
author: 
  name: "Adam Bartonicek"
  affiliation: "The University of Auckland"
bibliography: [references.bib]
biblio-style: "apalike"
editor_options: 
  chunk_output_type: console
---

## Live Demo {.center .middle .large}

## The Grammar of Graphics {.center .middle .large}

##

::: {layout-ncol=2 .center .middle .smaller-gap}

![Leland Wilkinson](./images/leland_wilkinson.png){height=250}

![Vegalite](./images/vegalite.png){height=250}

![ggplot2](./images/ggplot2.png){height=250}

![Tableau](./images/tableau.png){height=250}

:::

## Key properties of GoG {.center}

:::{.incremental}
- Algebraic
- Declarative (recipes, not taxonomies)
- Comprehensive (?)
:::

## @wilkinson2012 {.center}

:::{.incremental}
- *"This system **cannot produce a meaningless graphic**, however. This is a strong claim, vulnerable to a single counter-example. It is a claim based on the formal rules of the system, however, not on the evaluation of specific graphics it may produce."* (pp. 15)
- *"Some of the combinations of graphs and statistical methods may be **degenerate** or **bizarre**, but there is no moral reason to restrict them."* (pp. 112)
:::

## What makes a plot degenerate? {.center .middle}

##

```{r}
library(ggplot2)
library(patchwork)

mtcars$cyl <- factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am)

pal_paired_3 <- palette.colors(6, "Paired")[c(1, 2, 5, 6, 3, 4)]
pal_dark_3 <- pal_paired_3[2 * 1:3]

assign("scale_fill_discrete", function(..., values = pal_paired_3) 
  scale_fill_manual(..., values = values), globalenv())

assign("scale_color_discrete", function(..., values = pal_paired_3) 
  scale_color_manual(..., values = values), globalenv())

theme_set(theme_bw(base_size = 20) +
          theme(panel.grid = element_blank()))
```

```{r}
#| eval: false
p <- ggplot(mtcars, aes(cyl, wt, fill = am)) +
  geom_bar(stat = "summary", fun = "mean", col = "white", linewidth = 0.8) +
  labs(x = "Cylinders", y = NULL, fill = "Auto")
ggsave("./images/degenerate1.png", p, width = 6.53, height = 4, units = "in")
```

![](./images/degenerate1.png)

##

```{r}
#| eval: false
p <- ggplot(mtcars, aes(cyl, wt, fill = am)) +
  geom_bar(stat = "summary", fun = "mean", col = "white", linewidth = 0.8) +
  labs(x = "Cylinders", y = "Average weight", fill = "Auto")
ggsave("./images/degenerate2.png", p, width = 6.53, height = 4, units = "in")
```

![](./images/degenerate2.png)

## {.middle}

```{r}
#| echo: true
#| eval: false
ggplot(mtcars, aes(cyl, wt, fill = am)) +
  geom_bar(stat = "summary", fun = "mean") +
  labs(x = "Cylinders", y = "Average weight", fill = "Auto")
```

```{r}
#| eval: false
p <- ggplot(mtcars, aes(cyl, wt, fill = am)) +
  geom_bar(stat = "summary", fun = "mean", col = "white", linewidth = 0.8) +
  labs(x = "Cylinders", y = "Average weight", fill = "Auto")
ggsave("./images/degenerate3.png", p, width = 6.53, height = 4, units = "in")
```

![](./images/degenerate3.png)

## {.middle}

```{r}
#| echo: true
#| eval: false
ggplot(mtcars, aes(cyl, wt, fill = am)) +
  geom_bar(stat = "summary", fun = "mean", position = "stack") +
  labs(x = "Cylinders", y = "Average weight", fill = "Auto")
```

![](./images/degenerate3.png)

## Stacking is not *just* a graphical operation... {.center .middle}

## Stacking: Not only about graphics {.smaller .center}

::: {.incremental}

- *"Stacking is useful when the **sum of the amounts** represented by the individual stacked bars **is in itself a meaningful** amount."* [@wilke2019, p. 52]

- *"Because this gives the visual impression of one element that is the sum of several others, it is very important that if the element’s size is used to display a statistic, then that **statistic must be summable**. Stacking bars that represent counts, sums, or percentages are fine, but a **stacked bar chart where bars show average values is generally meaningless.**"* [@wills2011, p. 112]

- *"[...] We do this to ensure that aggregate statistics are always computed over the input data, and so users do not inadvertently compute e.g., averages of averages, which **can easily lead to misinterpretation**."* [@wu2022]

:::

## Linked selection

- One of the most useful interactive features^[see e.g. @becker1987; @buja1996; @wilhelm2003; @heer2012; @ward2015; @ware2019]
- Click or click and drag to select objects in one plot, highlight the corresponding cases across all other plots

```{r}

limits <- c(2.55, 12, 4.25, 26)
mtcars$selected <- with(mtcars, wt > limits[1] & mpg > limits[2]
                        & wt < limits[3] & mpg < limits[4])

p1 <- ggplot(mtcars, aes(wt, mpg, col = selected)) + 
  geom_point() +
  geom_rect(xmin = limits[1], xmax = limits[3], 
            ymin = limits[2], ymax = limits[4],
            fill = NA, col = "grey60", lty = "dashed") +
  scale_color_manual(values = pal_paired_3) +
  guides(col = "none") +
  labs(x = "Weight", y = "Mileage") +
  theme_bw(base_size = 12) +
  theme(panel.grid = element_blank(),
        plot.margin = unit(c(0, 0.5, 0, 0), units = "cm"))

p2 <- ggplot(mtcars, aes(cyl, fill = selected)) + 
  geom_bar(col = "white") + 
  guides(fill = "none") +
  labs(x = "Cylinders", y = "Count") +
  theme_bw(base_size = 12) +
  theme(panel.grid = element_blank(),
        plot.margin = unit(c(0, 0, 0, 0.5), units = "cm"))

p <- p1 + p2
ggsave("./images/linked-selection.png", width = 6.35, height = 2, units = "in")
```
![](./images/linked-selection.png){height=250 fig-align="center"}

## Displaying linked selection

:::{.incremental}

- **One-to-one plots**: 
  - E.g. scatterplots, parallel coordinate plots
  - Simple - just draw in corresponding color
- **Many-to-one (aggregate) plots**:
  - E.g. barplots, histograms, bubbleplots, etc...
  - More complicated - can highlight *parts* of objects (stacking/highlighting), dodge, overlay, etc...
:::

## {.center .middle}

[Linked selection with a dodged barplot (Altair)](https://altair-viz.github.io/gallery/selection_histogram.html) 

## Drawbacks of dodging/overlay {.center}

:::{.incremental}

- The object sizes are not fixed/bounded
- Axis limits may need to be recomputed upon selection
- Loss of visual context [see @wilhelm2008; @sievert2020]
  
:::

<!-- ## {.center} -->

```{r}
#| eval: false
p0 <- ggplot() +
  guides(fill = "none") +
  labs(x = NULL, y = NULL) +
  theme_bw(base_size = 12) +
          theme(panel.grid = element_blank())

set.seed(89719)
mtcars$group1 <- factor(sample(rep(c(0, 1), c(27, 5))))
mtcars$group2 <- factor(sample(rep(c(0, 1), c(17, 15))))
mtcars$group3 <- factor(sample(rep(c(0, 1), c(7, 25))))

plots <- list()
for (i in 1:3) {
  mtcars$group <- mtcars[[paste0("group", i)]]
  plots[[i]] <- p0 +
    geom_bar(data = mtcars, col = "white", mapping = aes(cyl, fill = group))
  plots[[3 + i]] <- plot_spacer()
  plots[[6 + i]] <- p0 +
    geom_bar(data = mtcars, col = "white", mapping = aes(cyl, fill = group),
             position = "dodge")
}

p <- wrap_plots(plots, ncol = 3, heights = c(1, 0.1, 1))
ggsave("./images/stacking-vs-dodging.png", p)
```

<!-- ![](./images/stacking-vs-dodging.png) -->

## Highlighting *parts* is powerful... {.center .middle}

## However, the relationship of *parts* to the *whole* must be well-defined... {.center .middle}

## {.center .middle .smaller}

- *"Stacking is useful when the **sum of the amounts** represented by the individual stacked bars **is in itself a meaningful** amount."* [@wilke2019, p. 52]

- *"Because this gives the visual impression of one element that is the sum of several others, it is very important that if the element’s size is used to display a statistic, then that **statistic must be summable**. Stacking bars that represent counts, sums, or percentages are fine, but a **stacked bar chart where bars show average values is generally meaningless.**"* [@wills2011, p. 112]

- *"[...] We do this to ensure that aggregate statistics are always computed over the input data, and so users do not inadvertently compute e.g., averages of averages, which **can easily lead to misinterpretation**."* [@wu2022]

## Only sums and counts? {.center .middle}

## {.center .middle}

```{r}
#| eval: false

df <- aggregate(wt ~ cyl + am, FUN = max, data = mtcars)

p <- ggplot(df, aes(cyl, wt, fill = am)) +
  geom_bar(stat = "identity", col = "white", linewidth = 0.8) +
  scale_fill_manual(values = pal_paired_3) +
  labs(x = "Cylinders", y = "Maximum weight") +
  guides(fill = "none")

ggsave("./images/stacking-max.png", p, width = 6.35, height = 4.5)
```

![](./images/stacking-max.png)

## Beyond sums and counts

:::{.incremental}
- Other summary statistics preserve part-whole relations
- Known as *monoids* in category theory/abstract algebra [@fong2019; @lawvere2009]
- Examples: 
  - Sums, counts, products, maximums
  - Vector norms 
  - Convex hulls
  - String concatenation 
:::

## Monoids

:::{.incremental}
- A monoid $(X, \otimes, e)$ is a tuple consisting of a set $X$, a binary operation $\otimes$, and a neutral element $e$
- Such that, for all $x, y, z \in X$, we have:
  - **Associativity**: $(x \otimes y) \otimes z = x \otimes (y \otimes z) = x \otimes y \otimes z$
  - **Unitality**: $x \otimes e = e \otimes x = x$
- Examples: 
\begin{aligned}
  1 + (2 + 3) = (1 + 2) + 3& \qquad x + 0 = 0 + x = x \\
  2 \cdot (3 \cdot 4) = (2 \cdot 3) \cdot 4& \qquad x \cdot 1 = 1 \cdot x = x
\end{aligned}
:::
  
## Summarizing with monoids

:::{.incremental}
- Suppose $F$ amounts to summarizing a set $X$ by repeatedly applying $\otimes$, $F(X) = x_1 \otimes x_2 \otimes \ldots \otimes x_n$
- Now, suppose we summarize $X$ and $Y$ and combine:
$$\begin{align} F(X) \otimes F(Y) &= (x_1 \otimes x_2 \otimes \ldots \otimes x_n) \otimes (y_1 \otimes y_2 \otimes \ldots \otimes y_n) \\
&= x_1 \otimes x_2 \otimes \ldots \otimes x_n \otimes y_1 \otimes y_2 \otimes \ldots \otimes y_n \\
&= F(X \cup Y)
\end{align}
$$
:::

##

$$F(X) \otimes F(Y) = F(X \cup Y)$$

```{r}
mtcars_selected <- subset(mtcars, selected)

chull1 <- mtcars[with(mtcars, chull(wt, hp)), ]
chull2 <- mtcars_selected[with(mtcars_selected, chull(wt, hp)), ]

p1 <- ggplot(mtcars, aes(wt, mpg, col = selected)) + 
  geom_point() +
  geom_rect(xmin = limits[1], xmax = limits[3], 
            ymin = limits[2], ymax = limits[4],
            fill = NA, col = "grey60", lty = "dashed") +
  scale_color_manual(values = pal_paired_3) +
  guides(col = "none") +
  labs(x = "Weight", y = "Mileage") +
  theme_bw(base_size = 12) +
  theme(panel.grid = element_blank(),
        plot.margin = unit(c(0, 0.5, 0, 0), units = "cm"))

p2 <- ggplot(mtcars, aes(wt, hp)) +
  geom_polygon(data = chull1, fill = pal_paired_3[1]) +
  geom_polygon(data = chull2, fill = pal_paired_3[2]) +
  geom_point(mapping = aes(col = selected)) +
  scale_color_manual(values = colorspace::darken(pal_paired_3, 0.3)) +
  guides(col = "none") +
  labs(x = "Weight", y = "Horsepower") +
  theme_bw(base_size = 12) +
  theme(panel.grid = element_blank(),
        plot.margin = unit(c(0, 0.5, 0, 0), units = "cm"))

p <- p1 + p2
ggsave("./images/linked-selection3.png", width = 6.35, height = 3, units = "in")
```

![](./images/linked-selection3.png){.fragment fig-align="center"}

## Monoids and the GoG

:::{.incremental}
- *"Some of the combinations of graphs and statistical methods may be **degenerate** or **bizarre**, but there is no moral reason to restrict them."* [@wilkinson2012, pp. 112]
- ~ Plots which do not preserve part-whole relations
- Important decision for interactive graphics
:::

## Conclusion

:::{.incremental}
- GoG is a great but has room for refinement
- Tension between modularity and structure
  - Things which are independent are easy
  - However, graphics and statistics are *not* independent
  - To draw objects composed of parts, we need monoids
- What we can *do* with a graphic is fundamentally determined by what the graphic *is*
:::

## References 
